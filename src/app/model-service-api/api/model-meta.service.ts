/**
 * EveKit Model API Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { MetaData } from '../model/metaData';
import { ServiceError } from '../model/serviceError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ModelMetaService {

    protected basePath = 'https://evekit-model.orbital.enterprises//api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get meta data value.  A value of null indicates key was not set on this object.
     * 
     * @param accessKey Model access key
     * @param accessCred Model access credential
     * @param cid Model object ID
     * @param key Meta-data key
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, observe?: 'body', reportProgress?: boolean): Observable<MetaData>;
    public getMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MetaData>>;
    public getMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MetaData>>;
    public getMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (accessKey === null || accessKey === undefined) {
            throw new Error('Required parameter accessKey was null or undefined when calling getMetaDataValue.');
        }

        if (accessCred === null || accessCred === undefined) {
            throw new Error('Required parameter accessCred was null or undefined when calling getMetaDataValue.');
        }

        if (cid === null || cid === undefined) {
            throw new Error('Required parameter cid was null or undefined when calling getMetaDataValue.');
        }

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getMetaDataValue.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (accessKey !== undefined && accessKey !== null) {
            queryParameters = queryParameters.set('accessKey', <any>accessKey);
        }
        if (accessCred !== undefined && accessCred !== null) {
            queryParameters = queryParameters.set('accessCred', <any>accessCred);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<MetaData>(`${this.basePath}/ws/v1/meta/meta/${encodeURIComponent(String(cid))}/${encodeURIComponent(String(key))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all meta data values for the given model object.
     * 
     * @param accessKey Model access key
     * @param accessCred Model access credential
     * @param cid Model object ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMetaDataValues(accessKey: number, accessCred: string, cid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<MetaData>>;
    public getMetaDataValues(accessKey: number, accessCred: string, cid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MetaData>>>;
    public getMetaDataValues(accessKey: number, accessCred: string, cid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MetaData>>>;
    public getMetaDataValues(accessKey: number, accessCred: string, cid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (accessKey === null || accessKey === undefined) {
            throw new Error('Required parameter accessKey was null or undefined when calling getMetaDataValues.');
        }

        if (accessCred === null || accessCred === undefined) {
            throw new Error('Required parameter accessCred was null or undefined when calling getMetaDataValues.');
        }

        if (cid === null || cid === undefined) {
            throw new Error('Required parameter cid was null or undefined when calling getMetaDataValues.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (accessKey !== undefined && accessKey !== null) {
            queryParameters = queryParameters.set('accessKey', <any>accessKey);
        }
        if (accessCred !== undefined && accessCred !== null) {
            queryParameters = queryParameters.set('accessCred', <any>accessCred);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<MetaData>>(`${this.basePath}/ws/v1/meta/meta/${encodeURIComponent(String(cid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete meta data value.
     * 
     * @param accessKey Model access key
     * @param accessCred Model access credential
     * @param cid Model object ID
     * @param key Meta-data key
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (accessKey === null || accessKey === undefined) {
            throw new Error('Required parameter accessKey was null or undefined when calling removeMetaDataValue.');
        }

        if (accessCred === null || accessCred === undefined) {
            throw new Error('Required parameter accessCred was null or undefined when calling removeMetaDataValue.');
        }

        if (cid === null || cid === undefined) {
            throw new Error('Required parameter cid was null or undefined when calling removeMetaDataValue.');
        }

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling removeMetaDataValue.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (accessKey !== undefined && accessKey !== null) {
            queryParameters = queryParameters.set('accessKey', <any>accessKey);
        }
        if (accessCred !== undefined && accessCred !== null) {
            queryParameters = queryParameters.set('accessCred', <any>accessCred);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ws/v1/meta/meta/${encodeURIComponent(String(cid))}/${encodeURIComponent(String(key))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete all meta data values for the given model object.
     * 
     * @param accessKey Model access key
     * @param accessCred Model access credential
     * @param cid Model object ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeMetaDataValues(accessKey: number, accessCred: string, cid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeMetaDataValues(accessKey: number, accessCred: string, cid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeMetaDataValues(accessKey: number, accessCred: string, cid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeMetaDataValues(accessKey: number, accessCred: string, cid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (accessKey === null || accessKey === undefined) {
            throw new Error('Required parameter accessKey was null or undefined when calling removeMetaDataValues.');
        }

        if (accessCred === null || accessCred === undefined) {
            throw new Error('Required parameter accessCred was null or undefined when calling removeMetaDataValues.');
        }

        if (cid === null || cid === undefined) {
            throw new Error('Required parameter cid was null or undefined when calling removeMetaDataValues.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (accessKey !== undefined && accessKey !== null) {
            queryParameters = queryParameters.set('accessKey', <any>accessKey);
        }
        if (accessCred !== undefined && accessCred !== null) {
            queryParameters = queryParameters.set('accessCred', <any>accessCred);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ws/v1/meta/meta/${encodeURIComponent(String(cid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set meta data value.  If a value already exists for this key, then it is silently over-written.  Null keys or values are not allowed.
     * 
     * @param accessKey Model access key
     * @param accessCred Model access credential
     * @param cid Model object ID
     * @param key Meta-data key
     * @param value Meta-data value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, value: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, value: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, value: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setMetaDataValue(accessKey: number, accessCred: string, cid: number, key: string, value: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (accessKey === null || accessKey === undefined) {
            throw new Error('Required parameter accessKey was null or undefined when calling setMetaDataValue.');
        }

        if (accessCred === null || accessCred === undefined) {
            throw new Error('Required parameter accessCred was null or undefined when calling setMetaDataValue.');
        }

        if (cid === null || cid === undefined) {
            throw new Error('Required parameter cid was null or undefined when calling setMetaDataValue.');
        }

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling setMetaDataValue.');
        }

        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling setMetaDataValue.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (accessKey !== undefined && accessKey !== null) {
            queryParameters = queryParameters.set('accessKey', <any>accessKey);
        }
        if (accessCred !== undefined && accessCred !== null) {
            queryParameters = queryParameters.set('accessCred', <any>accessCred);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/ws/v1/meta/meta/${encodeURIComponent(String(cid))}/${encodeURIComponent(String(key))}/${encodeURIComponent(String(value))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
