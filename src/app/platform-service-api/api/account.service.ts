/**
 * EveKit Frontend Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ESIScopeDescription } from '../model/eSIScopeDescription';
import { EveKitUserAccount } from '../model/eveKitUserAccount';
import { EveKitUserAuthSource } from '../model/eveKitUserAuthSource';
import { EveKitUserNotification } from '../model/eveKitUserNotification';
import { ServiceError } from '../model/serviceError';
import { SynchronizedAccountAccessKey } from '../model/synchronizedAccountAccessKey';
import { SynchronizedEveAccount } from '../model/synchronizedEveAccount';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AccountService {

    protected basePath = 'http://localhost:8888/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Broadcast a notification to all active users
     * 
     * @param content Content for new note.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public broadcastNotification(content: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public broadcastNotification(content: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public broadcastNotification(content: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public broadcastNotification(content: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (content === null || content === undefined) {
            throw new Error('Required parameter content was null or undefined when calling broadcastNotification.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (content !== undefined) {
            queryParameters = queryParameters.set('content', <any>content);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/ws/v1/account/note_all`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List all character ESI endpoints
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public charEndpoints(observe?: 'body', reportProgress?: boolean): Observable<Array<ESIScopeDescription>>;
    public charEndpoints(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ESIScopeDescription>>>;
    public charEndpoints(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ESIScopeDescription>>>;
    public charEndpoints(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<ESIScopeDescription>>(`${this.basePath}/ws/v1/account/list_char_endpoints`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Check whether the current user is an admin
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkAdmin(observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public checkAdmin(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public checkAdmin(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public checkAdmin(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/ws/v1/account/isadmin`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List all corporation ESI endpoints
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public corpEndpoints(observe?: 'body', reportProgress?: boolean): Observable<Array<ESIScopeDescription>>;
    public corpEndpoints(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ESIScopeDescription>>>;
    public corpEndpoints(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ESIScopeDescription>>>;
    public corpEndpoints(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<ESIScopeDescription>>(`${this.basePath}/ws/v1/account/list_corp_endpoints`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Send a notification to a user
     * 
     * @param uid ID of user account for which a note will be created.
     * @param content Content for new note.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createNotification(uid: number, content: string, observe?: 'body', reportProgress?: boolean): Observable<EveKitUserNotification>;
    public createNotification(uid: number, content: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EveKitUserNotification>>;
    public createNotification(uid: number, content: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EveKitUserNotification>>;
    public createNotification(uid: number, content: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling createNotification.');
        }
        if (content === null || content === undefined) {
            throw new Error('Required parameter content was null or undefined when calling createNotification.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (content !== undefined) {
            queryParameters = queryParameters.set('content', <any>content);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<EveKitUserNotification>(`${this.basePath}/ws/v1/account/note/${encodeURIComponent(String(uid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an access key.
     * 
     * @param uid ID of user for which a access key will be deleted.  Set to -1 for the current logged in user.
     * @param aid ID of sync account for which an access key will be deleted.
     * @param kid ID of access key to delete.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAccessKey(uid: number, aid: number, kid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAccessKey(uid: number, aid: number, kid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAccessKey(uid: number, aid: number, kid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAccessKey(uid: number, aid: number, kid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling deleteAccessKey.');
        }
        if (aid === null || aid === undefined) {
            throw new Error('Required parameter aid was null or undefined when calling deleteAccessKey.');
        }
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling deleteAccessKey.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ws/v1/account/access_key/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(aid))}/${encodeURIComponent(String(kid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a sync account.
     * 
     * @param uid ID of user for which a sync account will be marked for delete.  Set to -1 for the current logged in user.
     * @param aid ID of sync account to mark.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSyncAccount(uid: number, aid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSyncAccount(uid: number, aid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSyncAccount(uid: number, aid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSyncAccount(uid: number, aid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling deleteSyncAccount.');
        }
        if (aid === null || aid === undefined) {
            throw new Error('Required parameter aid was null or undefined when calling deleteSyncAccount.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ws/v1/account/sync_account/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(aid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of access keys for the given user and account id
     * 
     * @param uid ID of user for which access keys will be retrieved.  Set to -1 to retrieve for the current logged in user.
     * @param aid ID of sync account for which keys will be retrieved.
     * @param kid ID of access key to retrieve, or -1 to retrieve all access keys for the given account.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccessKey(uid: number, aid: number, kid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SynchronizedAccountAccessKey>>;
    public getAccessKey(uid: number, aid: number, kid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SynchronizedAccountAccessKey>>>;
    public getAccessKey(uid: number, aid: number, kid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SynchronizedAccountAccessKey>>>;
    public getAccessKey(uid: number, aid: number, kid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling getAccessKey.');
        }
        if (aid === null || aid === undefined) {
            throw new Error('Required parameter aid was null or undefined when calling getAccessKey.');
        }
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling getAccessKey.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<SynchronizedAccountAccessKey>>(`${this.basePath}/ws/v1/account/access_key/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(aid))}/${encodeURIComponent(String(kid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of sync accounts for the given user or only a single account if an id is provided
     * 
     * @param uid ID of user for which sync accounts will be retrieved.  Set to -1 to retrieve for the current logged in user.
     * @param aid ID of single sync account to retrieve.  Set to -1 to retrieve all sync accounts for the given user.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSyncAccount(uid: number, aid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SynchronizedEveAccount>>;
    public getSyncAccount(uid: number, aid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SynchronizedEveAccount>>>;
    public getSyncAccount(uid: number, aid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SynchronizedEveAccount>>>;
    public getSyncAccount(uid: number, aid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling getSyncAccount.');
        }
        if (aid === null || aid === undefined) {
            throw new Error('Required parameter aid was null or undefined when calling getSyncAccount.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<SynchronizedEveAccount>>(`${this.basePath}/ws/v1/account/sync_account/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(aid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get information about the current logged in user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUser(observe?: 'body', reportProgress?: boolean): Observable<EveKitUserAccount>;
    public getUser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EveKitUserAccount>>;
    public getUser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EveKitUserAccount>>;
    public getUser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<EveKitUserAccount>(`${this.basePath}/ws/v1/account/user`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the last user auth source used by the given user, or the currently logged in user
     * 
     * @param uid ID of user account for which the last source will be retrieved.  Set to -1 to retrieve for the current logged in user.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserLastSource(uid: number, observe?: 'body', reportProgress?: boolean): Observable<EveKitUserAuthSource>;
    public getUserLastSource(uid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EveKitUserAuthSource>>;
    public getUserLastSource(uid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EveKitUserAuthSource>>;
    public getUserLastSource(uid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling getUserLastSource.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<EveKitUserAuthSource>(`${this.basePath}/ws/v1/account/user_last_source/${encodeURIComponent(String(uid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the list of all user auth sources for the given user, or the currently logged in user
     * 
     * @param uid ID of user account for which all sources will be retrieved.  Set to -1 to retrieve for the current logged in user.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserSources(uid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<EveKitUserAuthSource>>;
    public getUserSources(uid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EveKitUserAuthSource>>>;
    public getUserSources(uid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EveKitUserAuthSource>>>;
    public getUserSources(uid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling getUserSources.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<EveKitUserAuthSource>>(`${this.basePath}/ws/v1/account/user_sources/${encodeURIComponent(String(uid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Check whether a synchronized account is disabled
     * 
     * @param uid ID of user account to toggle
     * @param aid ID of sync account to toggle
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isAccountDisabled(uid: number, aid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public isAccountDisabled(uid: number, aid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public isAccountDisabled(uid: number, aid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public isAccountDisabled(uid: number, aid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling isAccountDisabled.');
        }
        if (aid === null || aid === undefined) {
            throw new Error('Required parameter aid was null or undefined when calling isAccountDisabled.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/ws/v1/account/is_account_disabled/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(aid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve list of undeleted notifications for a user
     * 
     * @param uid ID of user account for which notifications will be retrieved
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listNotifications(uid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<EveKitUserNotification>>;
    public listNotifications(uid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EveKitUserNotification>>>;
    public listNotifications(uid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EveKitUserNotification>>>;
    public listNotifications(uid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling listNotifications.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<EveKitUserNotification>>(`${this.basePath}/ws/v1/account/note/${encodeURIComponent(String(uid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List all site users
     * List all site users
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listUsers(observe?: 'body', reportProgress?: boolean): Observable<Array<EveKitUserAccount>>;
    public listUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EveKitUserAccount>>>;
    public listUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EveKitUserAccount>>>;
    public listUsers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<EveKitUserAccount>>(`${this.basePath}/ws/v1/account/list_users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Mark a notification as read
     * 
     * @param uid ID of user account owning notification to be marked trash
     * @param nid Notification ID of note to be marked trash
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public markNoteDeleted(uid: number, nid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public markNoteDeleted(uid: number, nid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public markNoteDeleted(uid: number, nid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public markNoteDeleted(uid: number, nid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling markNoteDeleted.');
        }
        if (nid === null || nid === undefined) {
            throw new Error('Required parameter nid was null or undefined when calling markNoteDeleted.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/ws/v1/account/note/trash/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(nid))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Mark a notification as read
     * 
     * @param uid ID of user account owning notification to be marked read
     * @param nid Notification ID of note to be marked read
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public markNoteRead(uid: number, nid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public markNoteRead(uid: number, nid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public markNoteRead(uid: number, nid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public markNoteRead(uid: number, nid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling markNoteRead.');
        }
        if (nid === null || nid === undefined) {
            throw new Error('Required parameter nid was null or undefined when calling markNoteRead.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/ws/v1/account/note/read/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(nid))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restore a sync account previously marked for deletion.
     * 
     * @param uid ID of user for which a sync account will be restored.  Set to -1 for the current logged in user.
     * @param aid ID of sync account to restore.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public restoreSyncAccount(uid: number, aid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public restoreSyncAccount(uid: number, aid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public restoreSyncAccount(uid: number, aid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public restoreSyncAccount(uid: number, aid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling restoreSyncAccount.');
        }
        if (aid === null || aid === undefined) {
            throw new Error('Required parameter aid was null or undefined when calling restoreSyncAccount.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/ws/v1/account/restore_sync_account/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(aid))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create or update an access key.  Returns the result of applying the change.
     * 
     * @param uid ID of user for which a access key will be updated or saved.  Set to -1 for the current logged in user.
     * @param aid ID of sync account which owns new or updated key.
     * @param kid ID of access key to update.  Set to -1 to save a new access key.
     * @param key Access key to save or update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveAccessKey(uid: number, aid: number, kid: number, key: SynchronizedAccountAccessKey, observe?: 'body', reportProgress?: boolean): Observable<SynchronizedEveAccount>;
    public saveAccessKey(uid: number, aid: number, kid: number, key: SynchronizedAccountAccessKey, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SynchronizedEveAccount>>;
    public saveAccessKey(uid: number, aid: number, kid: number, key: SynchronizedAccountAccessKey, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SynchronizedEveAccount>>;
    public saveAccessKey(uid: number, aid: number, kid: number, key: SynchronizedAccountAccessKey, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling saveAccessKey.');
        }
        if (aid === null || aid === undefined) {
            throw new Error('Required parameter aid was null or undefined when calling saveAccessKey.');
        }
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling saveAccessKey.');
        }
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling saveAccessKey.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<SynchronizedEveAccount>(`${this.basePath}/ws/v1/account/access_key/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(aid))}/${encodeURIComponent(String(kid))}`,
            key,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create or update a sync account.  Returns the result of applying the change.
     * 
     * @param uid ID of user for which a sync account will be updated or saved.  Set to -1 for the current logged in user.
     * @param aid ID of sync account to update.  Set to -1 to save a new account.
     * @param name Name of new account, or new name of existing account
     * @param charType True if account will sync a character, false otherwise.  Ignored for updates to existing accounts.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveSyncAccount(uid: number, aid: number, name: string, charType: boolean, observe?: 'body', reportProgress?: boolean): Observable<SynchronizedEveAccount>;
    public saveSyncAccount(uid: number, aid: number, name: string, charType: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SynchronizedEveAccount>>;
    public saveSyncAccount(uid: number, aid: number, name: string, charType: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SynchronizedEveAccount>>;
    public saveSyncAccount(uid: number, aid: number, name: string, charType: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling saveSyncAccount.');
        }
        if (aid === null || aid === undefined) {
            throw new Error('Required parameter aid was null or undefined when calling saveSyncAccount.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling saveSyncAccount.');
        }
        if (charType === null || charType === undefined) {
            throw new Error('Required parameter charType was null or undefined when calling saveSyncAccount.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (charType !== undefined) {
            queryParameters = queryParameters.set('charType', <any>charType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<SynchronizedEveAccount>(`${this.basePath}/ws/v1/account/sync_account/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(aid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Change the disabled state of a synchronized account
     * 
     * @param uid ID of user account to toggle
     * @param aid ID of sync account to toggle
     * @param disabled account disabled status
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toggleAccountDisabled(uid: number, aid: number, disabled: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public toggleAccountDisabled(uid: number, aid: number, disabled: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public toggleAccountDisabled(uid: number, aid: number, disabled: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public toggleAccountDisabled(uid: number, aid: number, disabled: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling toggleAccountDisabled.');
        }
        if (aid === null || aid === undefined) {
            throw new Error('Required parameter aid was null or undefined when calling toggleAccountDisabled.');
        }
        if (disabled === null || disabled === undefined) {
            throw new Error('Required parameter disabled was null or undefined when calling toggleAccountDisabled.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/ws/v1/account/toggle_account_disabled/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(aid))}/${encodeURIComponent(String(disabled))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Change the active state of a user
     * 
     * @param uid ID of user account to toggle
     * @param active New active state for user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toggleActive(uid: number, active: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public toggleActive(uid: number, active: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public toggleActive(uid: number, active: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public toggleActive(uid: number, active: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling toggleActive.');
        }
        if (active === null || active === undefined) {
            throw new Error('Required parameter active was null or undefined when calling toggleActive.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/ws/v1/account/toggle_user_active/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(active))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
