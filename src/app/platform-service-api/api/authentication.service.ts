/**
 * EveKit Frontend Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';

import {Observable} from 'rxjs';

import {PLATFORM_BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class AuthenticationService {

  protected basePath = 'http://localhost:8888/api';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(PLATFORM_BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (let consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Become the user with the specified UID
   *
   * @param uid UID of user to switch to
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public becomeUser(uid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public becomeUser(uid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public becomeUser(uid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public becomeUser(uid: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (uid === null || uid === undefined) {
      throw new Error('Required parameter uid was null or undefined when calling becomeUser.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [];

    return this.httpClient.get<any>(`${this.basePath}/ws/v1/auth/become/${encodeURIComponent(String(uid))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Handle OAuth callback for specified source.
   * Handle OAuth callback after initial redirection to an OAuth source.
   * @param source The source with which authentication just completed.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public callback(source: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public callback(source: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public callback(source: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public callback(source: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (source === null || source === undefined) {
      throw new Error('Required parameter source was null or undefined when calling callback.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [];

    return this.httpClient.get<any>(`${this.basePath}/ws/v1/auth/callback/${encodeURIComponent(String(source))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Authenticate using a specified source.
   * Initiate authentication using the specified source.  This will most often trigger a redirection to OAuth.
   * @param source The source with which to authenticate.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public login(source: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public login(source: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public login(source: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public login(source: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (source === null || source === undefined) {
      throw new Error('Required parameter source was null or undefined when calling login.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [];

    return this.httpClient.get<any>(`${this.basePath}/ws/v1/auth/login/${encodeURIComponent(String(source))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Logout the current logged in user.
   * Logout the current logged in user.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public logout(observe?: 'body', reportProgress?: boolean): Observable<any>;
  public logout(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public logout(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public logout(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [];

    return this.httpClient.get<any>(`${this.basePath}/ws/v1/auth/logout`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Remove a login source for a user.
   * Remove a login source for a user.
   * @param source Source we want to remove as a login source for the current logged in user.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public remove(source: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public remove(source: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public remove(source: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public remove(source: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (source === null || source === undefined) {
      throw new Error('Required parameter source was null or undefined when calling remove.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [];

    return this.httpClient.get<any>(`${this.basePath}/ws/v1/auth/remove/${encodeURIComponent(String(source))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
