/**
 * EveKit SDE API Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0.20180529
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {CrtCertificate} from '../model/crtCertificate';
import {CrtMastery} from '../model/crtMastery';
import {CrtSkill} from '../model/crtSkill';

import {SDE_BASE_PATH} from '../variables';
import {Configuration} from '../configuration';
import {Observable} from 'rxjs';


@Injectable()
export class CertificatesService {

  protected basePath = 'http://localhost:8080/evekit-sde/api/ws/v20180529';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(SDE_BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (let consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Get certificate masteries
   *
   * @param contid Continuation ID for paged results
   * @param maxresults Maximum number of results to retrieve
   * @param typeID Type ID selector
   * @param masteryLevel Mastery level selector
   * @param certID Certificate ID selector
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCertificateMasteries(contid?: number, maxresults?: number, typeID?: string, masteryLevel?: string, certID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CrtMastery>>;
  public getCertificateMasteries(contid?: number, maxresults?: number, typeID?: string, masteryLevel?: string, certID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrtMastery>>>;
  public getCertificateMasteries(contid?: number, maxresults?: number, typeID?: string, masteryLevel?: string, certID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrtMastery>>>;
  public getCertificateMasteries(contid?: number, maxresults?: number, typeID?: string, masteryLevel?: string, certID?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (contid !== undefined) {
      queryParameters = queryParameters.set('contid', <any>contid);
    }
    if (maxresults !== undefined) {
      queryParameters = queryParameters.set('maxresults', <any>maxresults);
    }
    if (typeID !== undefined) {
      queryParameters = queryParameters.set('typeID', <any>typeID);
    }
    if (masteryLevel !== undefined) {
      queryParameters = queryParameters.set('masteryLevel', <any>masteryLevel);
    }
    if (certID !== undefined) {
      queryParameters = queryParameters.set('certID', <any>certID);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<Array<CrtMastery>>(`${this.basePath}/crt/mastery`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get certificate skills
   *
   * @param contid Continuation ID for paged results
   * @param maxresults Maximum number of results to retrieve
   * @param certID Certificated ID selector
   * @param skillID Skill ID selector
   * @param certLevelInt Certificate level integer selector
   * @param skillLevel Skill level selector
   * @param certLevelText Certificate level text selector
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCertificateSkills(contid?: number, maxresults?: number, certID?: string, skillID?: string, certLevelInt?: string, skillLevel?: string, certLevelText?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CrtSkill>>;
  public getCertificateSkills(contid?: number, maxresults?: number, certID?: string, skillID?: string, certLevelInt?: string, skillLevel?: string, certLevelText?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrtSkill>>>;
  public getCertificateSkills(contid?: number, maxresults?: number, certID?: string, skillID?: string, certLevelInt?: string, skillLevel?: string, certLevelText?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrtSkill>>>;
  public getCertificateSkills(contid?: number, maxresults?: number, certID?: string, skillID?: string, certLevelInt?: string, skillLevel?: string, certLevelText?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (contid !== undefined) {
      queryParameters = queryParameters.set('contid', <any>contid);
    }
    if (maxresults !== undefined) {
      queryParameters = queryParameters.set('maxresults', <any>maxresults);
    }
    if (certID !== undefined) {
      queryParameters = queryParameters.set('certID', <any>certID);
    }
    if (skillID !== undefined) {
      queryParameters = queryParameters.set('skillID', <any>skillID);
    }
    if (certLevelInt !== undefined) {
      queryParameters = queryParameters.set('certLevelInt', <any>certLevelInt);
    }
    if (skillLevel !== undefined) {
      queryParameters = queryParameters.set('skillLevel', <any>skillLevel);
    }
    if (certLevelText !== undefined) {
      queryParameters = queryParameters.set('certLevelText', <any>certLevelText);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<Array<CrtSkill>>(`${this.basePath}/crt/skill`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get certificates
   *
   * @param contid Continuation ID for paged results
   * @param maxresults Maximum number of results to retrieve
   * @param certID Certificate ID selector
   * @param description Description selector
   * @param groupID Group ID selector
   * @param name Name selector
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCertificates(contid?: number, maxresults?: number, certID?: string, description?: string, groupID?: string, name?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CrtCertificate>>;
  public getCertificates(contid?: number, maxresults?: number, certID?: string, description?: string, groupID?: string, name?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrtCertificate>>>;
  public getCertificates(contid?: number, maxresults?: number, certID?: string, description?: string, groupID?: string, name?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrtCertificate>>>;
  public getCertificates(contid?: number, maxresults?: number, certID?: string, description?: string, groupID?: string, name?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (contid !== undefined) {
      queryParameters = queryParameters.set('contid', <any>contid);
    }
    if (maxresults !== undefined) {
      queryParameters = queryParameters.set('maxresults', <any>maxresults);
    }
    if (certID !== undefined) {
      queryParameters = queryParameters.set('certID', <any>certID);
    }
    if (description !== undefined) {
      queryParameters = queryParameters.set('description', <any>description);
    }
    if (groupID !== undefined) {
      queryParameters = queryParameters.set('groupID', <any>groupID);
    }
    if (name !== undefined) {
      queryParameters = queryParameters.set('name', <any>name);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<Array<CrtCertificate>>(`${this.basePath}/crt/certificate`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
