/**
 * EveKit SDE API Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0.20180713
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CrpActivity } from '../model/crpActivity';
import { CrpNpcCorporation } from '../model/crpNpcCorporation';
import { CrpNpcCorporationDivision } from '../model/crpNpcCorporationDivision';
import { CrpNpcCorporationResearchField } from '../model/crpNpcCorporationResearchField';
import { CrpNpcCorporationTrade } from '../model/crpNpcCorporationTrade';
import { CrpNpcDivision } from '../model/crpNpcDivision';
import { ServiceError } from '../model/serviceError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SDECorporationService {

    protected basePath = 'https://evekit-sde.orbital.enterprises/20180713/api/ws/v20180713';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get corporation activities
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param activityID Activity ID selector
     * @param activityName Activity name selector
     * @param description Description text selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCorpActivities(contid?: number, maxresults?: number, activityID?: string, activityName?: string, description?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CrpActivity>>;
    public getCorpActivities(contid?: number, maxresults?: number, activityID?: string, activityName?: string, description?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrpActivity>>>;
    public getCorpActivities(contid?: number, maxresults?: number, activityID?: string, activityName?: string, description?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrpActivity>>>;
    public getCorpActivities(contid?: number, maxresults?: number, activityID?: string, activityName?: string, description?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (activityID !== undefined) {
            queryParameters = queryParameters.set('activityID', <any>activityID);
        }
        if (activityName !== undefined) {
            queryParameters = queryParameters.set('activityName', <any>activityName);
        }
        if (description !== undefined) {
            queryParameters = queryParameters.set('description', <any>description);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<CrpActivity>>(`${this.basePath}/crp/activity`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get NPC corporation divisions
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param corporationID Corporation ID selector
     * @param divisionID Division ID selector
     * @param size Size selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNpcCorporationDivisions(contid?: number, maxresults?: number, corporationID?: string, divisionID?: string, size?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CrpNpcCorporationDivision>>;
    public getNpcCorporationDivisions(contid?: number, maxresults?: number, corporationID?: string, divisionID?: string, size?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrpNpcCorporationDivision>>>;
    public getNpcCorporationDivisions(contid?: number, maxresults?: number, corporationID?: string, divisionID?: string, size?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrpNpcCorporationDivision>>>;
    public getNpcCorporationDivisions(contid?: number, maxresults?: number, corporationID?: string, divisionID?: string, size?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (corporationID !== undefined) {
            queryParameters = queryParameters.set('corporationID', <any>corporationID);
        }
        if (divisionID !== undefined) {
            queryParameters = queryParameters.set('divisionID', <any>divisionID);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<CrpNpcCorporationDivision>>(`${this.basePath}/crp/npc_corp_division`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get NPC corporation research fields
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param skillID Skill ID selector
     * @param corporationID Corporation ID selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNpcCorporationResearchFields(contid?: number, maxresults?: number, skillID?: string, corporationID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CrpNpcCorporationResearchField>>;
    public getNpcCorporationResearchFields(contid?: number, maxresults?: number, skillID?: string, corporationID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrpNpcCorporationResearchField>>>;
    public getNpcCorporationResearchFields(contid?: number, maxresults?: number, skillID?: string, corporationID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrpNpcCorporationResearchField>>>;
    public getNpcCorporationResearchFields(contid?: number, maxresults?: number, skillID?: string, corporationID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (skillID !== undefined) {
            queryParameters = queryParameters.set('skillID', <any>skillID);
        }
        if (corporationID !== undefined) {
            queryParameters = queryParameters.set('corporationID', <any>corporationID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<CrpNpcCorporationResearchField>>(`${this.basePath}/crp/npc_corp_research_field`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get NPC corporation trades
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param corporationID Corporation ID selector
     * @param typeID Type ID selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNpcCorporationTrades(contid?: number, maxresults?: number, corporationID?: string, typeID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CrpNpcCorporationTrade>>;
    public getNpcCorporationTrades(contid?: number, maxresults?: number, corporationID?: string, typeID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrpNpcCorporationTrade>>>;
    public getNpcCorporationTrades(contid?: number, maxresults?: number, corporationID?: string, typeID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrpNpcCorporationTrade>>>;
    public getNpcCorporationTrades(contid?: number, maxresults?: number, corporationID?: string, typeID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (corporationID !== undefined) {
            queryParameters = queryParameters.set('corporationID', <any>corporationID);
        }
        if (typeID !== undefined) {
            queryParameters = queryParameters.set('typeID', <any>typeID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<CrpNpcCorporationTrade>>(`${this.basePath}/crp/npc_corp_trade`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get NPC corporations
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param corporationID Corporation ID selector
     * @param border Border attribute selector
     * @param corridor Corridor attribute selector
     * @param description Description text selector
     * @param enemyID Enemy ID selector
     * @param extent Extent selector
     * @param factionID Faction ID selector
     * @param friendID Friend ID selector
     * @param fringe Fringe attribute selector
     * @param hub Hub attribute selector
     * @param iconID Icon ID selector
     * @param initialPrice Initial price selector
     * @param investorID1 First investor ID selector
     * @param investorID2 Second investor ID selector
     * @param investorID3 Third investor ID selector
     * @param investorID4 Fourth investor ID selector
     * @param investorShares1 First investor shares selector
     * @param investorShares2 Second investor shares selector
     * @param investorShares3 Third investor shares selector
     * @param investorShares4 Fourth investor shares selector
     * @param minSecurity Minimum security selector
     * @param publicShares Public shares selector
     * @param scattered Scattered attribute selector
     * @param size Size selector
     * @param sizeFactor Size factor selector
     * @param solarSystemID Solar system IDselector
     * @param stationCount Station count selector
     * @param stationSystemCount Station system count selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNpcCorporations(contid?: number, maxresults?: number, corporationID?: string, border?: string, corridor?: string, description?: string, enemyID?: string, extent?: string, factionID?: string, friendID?: string, fringe?: string, hub?: string, iconID?: string, initialPrice?: string, investorID1?: string, investorID2?: string, investorID3?: string, investorID4?: string, investorShares1?: string, investorShares2?: string, investorShares3?: string, investorShares4?: string, minSecurity?: string, publicShares?: string, scattered?: string, size?: string, sizeFactor?: string, solarSystemID?: string, stationCount?: string, stationSystemCount?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CrpNpcCorporation>>;
    public getNpcCorporations(contid?: number, maxresults?: number, corporationID?: string, border?: string, corridor?: string, description?: string, enemyID?: string, extent?: string, factionID?: string, friendID?: string, fringe?: string, hub?: string, iconID?: string, initialPrice?: string, investorID1?: string, investorID2?: string, investorID3?: string, investorID4?: string, investorShares1?: string, investorShares2?: string, investorShares3?: string, investorShares4?: string, minSecurity?: string, publicShares?: string, scattered?: string, size?: string, sizeFactor?: string, solarSystemID?: string, stationCount?: string, stationSystemCount?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrpNpcCorporation>>>;
    public getNpcCorporations(contid?: number, maxresults?: number, corporationID?: string, border?: string, corridor?: string, description?: string, enemyID?: string, extent?: string, factionID?: string, friendID?: string, fringe?: string, hub?: string, iconID?: string, initialPrice?: string, investorID1?: string, investorID2?: string, investorID3?: string, investorID4?: string, investorShares1?: string, investorShares2?: string, investorShares3?: string, investorShares4?: string, minSecurity?: string, publicShares?: string, scattered?: string, size?: string, sizeFactor?: string, solarSystemID?: string, stationCount?: string, stationSystemCount?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrpNpcCorporation>>>;
    public getNpcCorporations(contid?: number, maxresults?: number, corporationID?: string, border?: string, corridor?: string, description?: string, enemyID?: string, extent?: string, factionID?: string, friendID?: string, fringe?: string, hub?: string, iconID?: string, initialPrice?: string, investorID1?: string, investorID2?: string, investorID3?: string, investorID4?: string, investorShares1?: string, investorShares2?: string, investorShares3?: string, investorShares4?: string, minSecurity?: string, publicShares?: string, scattered?: string, size?: string, sizeFactor?: string, solarSystemID?: string, stationCount?: string, stationSystemCount?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (corporationID !== undefined) {
            queryParameters = queryParameters.set('corporationID', <any>corporationID);
        }
        if (border !== undefined) {
            queryParameters = queryParameters.set('border', <any>border);
        }
        if (corridor !== undefined) {
            queryParameters = queryParameters.set('corridor', <any>corridor);
        }
        if (description !== undefined) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (enemyID !== undefined) {
            queryParameters = queryParameters.set('enemyID', <any>enemyID);
        }
        if (extent !== undefined) {
            queryParameters = queryParameters.set('extent', <any>extent);
        }
        if (factionID !== undefined) {
            queryParameters = queryParameters.set('factionID', <any>factionID);
        }
        if (friendID !== undefined) {
            queryParameters = queryParameters.set('friendID', <any>friendID);
        }
        if (fringe !== undefined) {
            queryParameters = queryParameters.set('fringe', <any>fringe);
        }
        if (hub !== undefined) {
            queryParameters = queryParameters.set('hub', <any>hub);
        }
        if (iconID !== undefined) {
            queryParameters = queryParameters.set('iconID', <any>iconID);
        }
        if (initialPrice !== undefined) {
            queryParameters = queryParameters.set('initialPrice', <any>initialPrice);
        }
        if (investorID1 !== undefined) {
            queryParameters = queryParameters.set('investorID1', <any>investorID1);
        }
        if (investorID2 !== undefined) {
            queryParameters = queryParameters.set('investorID2', <any>investorID2);
        }
        if (investorID3 !== undefined) {
            queryParameters = queryParameters.set('investorID3', <any>investorID3);
        }
        if (investorID4 !== undefined) {
            queryParameters = queryParameters.set('investorID4', <any>investorID4);
        }
        if (investorShares1 !== undefined) {
            queryParameters = queryParameters.set('investorShares1', <any>investorShares1);
        }
        if (investorShares2 !== undefined) {
            queryParameters = queryParameters.set('investorShares2', <any>investorShares2);
        }
        if (investorShares3 !== undefined) {
            queryParameters = queryParameters.set('investorShares3', <any>investorShares3);
        }
        if (investorShares4 !== undefined) {
            queryParameters = queryParameters.set('investorShares4', <any>investorShares4);
        }
        if (minSecurity !== undefined) {
            queryParameters = queryParameters.set('minSecurity', <any>minSecurity);
        }
        if (publicShares !== undefined) {
            queryParameters = queryParameters.set('publicShares', <any>publicShares);
        }
        if (scattered !== undefined) {
            queryParameters = queryParameters.set('scattered', <any>scattered);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sizeFactor !== undefined) {
            queryParameters = queryParameters.set('sizeFactor', <any>sizeFactor);
        }
        if (solarSystemID !== undefined) {
            queryParameters = queryParameters.set('solarSystemID', <any>solarSystemID);
        }
        if (stationCount !== undefined) {
            queryParameters = queryParameters.set('stationCount', <any>stationCount);
        }
        if (stationSystemCount !== undefined) {
            queryParameters = queryParameters.set('stationSystemCount', <any>stationSystemCount);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<CrpNpcCorporation>>(`${this.basePath}/crp/npc_corp`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get NPC divisions
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param divisionID Division ID selector
     * @param description Description text selector
     * @param divisionName Division name selector
     * @param leaderType Leader type selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNpcDivisions(contid?: number, maxresults?: number, divisionID?: string, description?: string, divisionName?: string, leaderType?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CrpNpcDivision>>;
    public getNpcDivisions(contid?: number, maxresults?: number, divisionID?: string, description?: string, divisionName?: string, leaderType?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrpNpcDivision>>>;
    public getNpcDivisions(contid?: number, maxresults?: number, divisionID?: string, description?: string, divisionName?: string, leaderType?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrpNpcDivision>>>;
    public getNpcDivisions(contid?: number, maxresults?: number, divisionID?: string, description?: string, divisionName?: string, leaderType?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (divisionID !== undefined) {
            queryParameters = queryParameters.set('divisionID', <any>divisionID);
        }
        if (description !== undefined) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (divisionName !== undefined) {
            queryParameters = queryParameters.set('divisionName', <any>divisionName);
        }
        if (leaderType !== undefined) {
            queryParameters = queryParameters.set('leaderType', <any>leaderType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<CrpNpcDivision>>(`${this.basePath}/crp/npc_division`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
