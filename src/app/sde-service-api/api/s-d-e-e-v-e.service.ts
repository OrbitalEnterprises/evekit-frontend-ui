/**
 * EveKit SDE API Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0.20180713
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { EveGraphic } from '../model/eveGraphic';
import { EveIcon } from '../model/eveIcon';
import { EveUnit } from '../model/eveUnit';
import { ServiceError } from '../model/serviceError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SDEEVEService {

    protected basePath = 'https://evekit-sde.orbital.enterprises/20180713/api/ws/v20180713';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get graphics
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param graphicID Graphic ID selector
     * @param sofFactionName Faction name selector
     * @param graphicFile Graphic file selector
     * @param sofHullName Hull name selector
     * @param sofRaceName Race name selector
     * @param description Description selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGraphics(contid?: number, maxresults?: number, graphicID?: string, sofFactionName?: string, graphicFile?: string, sofHullName?: string, sofRaceName?: string, description?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EveGraphic>>;
    public getGraphics(contid?: number, maxresults?: number, graphicID?: string, sofFactionName?: string, graphicFile?: string, sofHullName?: string, sofRaceName?: string, description?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EveGraphic>>>;
    public getGraphics(contid?: number, maxresults?: number, graphicID?: string, sofFactionName?: string, graphicFile?: string, sofHullName?: string, sofRaceName?: string, description?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EveGraphic>>>;
    public getGraphics(contid?: number, maxresults?: number, graphicID?: string, sofFactionName?: string, graphicFile?: string, sofHullName?: string, sofRaceName?: string, description?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (graphicID !== undefined) {
            queryParameters = queryParameters.set('graphicID', <any>graphicID);
        }
        if (sofFactionName !== undefined) {
            queryParameters = queryParameters.set('sofFactionName', <any>sofFactionName);
        }
        if (graphicFile !== undefined) {
            queryParameters = queryParameters.set('graphicFile', <any>graphicFile);
        }
        if (sofHullName !== undefined) {
            queryParameters = queryParameters.set('sofHullName', <any>sofHullName);
        }
        if (sofRaceName !== undefined) {
            queryParameters = queryParameters.set('sofRaceName', <any>sofRaceName);
        }
        if (description !== undefined) {
            queryParameters = queryParameters.set('description', <any>description);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<EveGraphic>>(`${this.basePath}/eve/graphic`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get icons
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param iconID Icon ID selector
     * @param description Description text selector
     * @param iconFile Icon file selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIcons(contid?: number, maxresults?: number, iconID?: string, description?: string, iconFile?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EveIcon>>;
    public getIcons(contid?: number, maxresults?: number, iconID?: string, description?: string, iconFile?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EveIcon>>>;
    public getIcons(contid?: number, maxresults?: number, iconID?: string, description?: string, iconFile?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EveIcon>>>;
    public getIcons(contid?: number, maxresults?: number, iconID?: string, description?: string, iconFile?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (iconID !== undefined) {
            queryParameters = queryParameters.set('iconID', <any>iconID);
        }
        if (description !== undefined) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (iconFile !== undefined) {
            queryParameters = queryParameters.set('iconFile', <any>iconFile);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<EveIcon>>(`${this.basePath}/eve/icon`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get units
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param unitID Unit ID selector
     * @param description Description text selector
     * @param displayName Display name selector
     * @param unitName Unit name selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUnits(contid?: number, maxresults?: number, unitID?: string, description?: string, displayName?: string, unitName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EveUnit>>;
    public getUnits(contid?: number, maxresults?: number, unitID?: string, description?: string, displayName?: string, unitName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EveUnit>>>;
    public getUnits(contid?: number, maxresults?: number, unitID?: string, description?: string, displayName?: string, unitName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EveUnit>>>;
    public getUnits(contid?: number, maxresults?: number, unitID?: string, description?: string, displayName?: string, unitName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (unitID !== undefined) {
            queryParameters = queryParameters.set('unitID', <any>unitID);
        }
        if (description !== undefined) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (displayName !== undefined) {
            queryParameters = queryParameters.set('displayName', <any>displayName);
        }
        if (unitName !== undefined) {
            queryParameters = queryParameters.set('unitName', <any>unitName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<EveUnit>>(`${this.basePath}/eve/unit`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
