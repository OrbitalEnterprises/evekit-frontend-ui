/**
 * EveKit SDE API Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0.20180713
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { IndActivity } from '../model/indActivity';
import { IndActivityMaterial } from '../model/indActivityMaterial';
import { IndActivityProbability } from '../model/indActivityProbability';
import { IndActivityProduct } from '../model/indActivityProduct';
import { IndActivitySkill } from '../model/indActivitySkill';
import { IndBlueprint } from '../model/indBlueprint';
import { ServiceError } from '../model/serviceError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SDEIndustryService {

    protected basePath = 'https://evekit-sde.orbital.enterprises/20180713/api/ws/v20180713';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get industry activities
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param typeID Type ID selector
     * @param activityID Activity ID selector
     * @param time Time selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActivities(contid?: number, maxresults?: number, typeID?: string, activityID?: string, time?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IndActivity>>;
    public getActivities(contid?: number, maxresults?: number, typeID?: string, activityID?: string, time?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IndActivity>>>;
    public getActivities(contid?: number, maxresults?: number, typeID?: string, activityID?: string, time?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IndActivity>>>;
    public getActivities(contid?: number, maxresults?: number, typeID?: string, activityID?: string, time?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (typeID !== undefined) {
            queryParameters = queryParameters.set('typeID', <any>typeID);
        }
        if (activityID !== undefined) {
            queryParameters = queryParameters.set('activityID', <any>activityID);
        }
        if (time !== undefined) {
            queryParameters = queryParameters.set('time', <any>time);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<IndActivity>>(`${this.basePath}/ind/activity`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get industry activity materials
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param typeID Type ID selector
     * @param activityID Activity ID selector
     * @param materialTypeID Material type ID selector
     * @param quantity Quantity selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActivityMaterials(contid?: number, maxresults?: number, typeID?: string, activityID?: string, materialTypeID?: string, quantity?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IndActivityMaterial>>;
    public getActivityMaterials(contid?: number, maxresults?: number, typeID?: string, activityID?: string, materialTypeID?: string, quantity?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IndActivityMaterial>>>;
    public getActivityMaterials(contid?: number, maxresults?: number, typeID?: string, activityID?: string, materialTypeID?: string, quantity?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IndActivityMaterial>>>;
    public getActivityMaterials(contid?: number, maxresults?: number, typeID?: string, activityID?: string, materialTypeID?: string, quantity?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (typeID !== undefined) {
            queryParameters = queryParameters.set('typeID', <any>typeID);
        }
        if (activityID !== undefined) {
            queryParameters = queryParameters.set('activityID', <any>activityID);
        }
        if (materialTypeID !== undefined) {
            queryParameters = queryParameters.set('materialTypeID', <any>materialTypeID);
        }
        if (quantity !== undefined) {
            queryParameters = queryParameters.set('quantity', <any>quantity);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<IndActivityMaterial>>(`${this.basePath}/ind/activity_material`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get industry activity probabilities
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param typeID Type ID selector
     * @param activityID Activity ID selector
     * @param productTypeID Product type ID selector
     * @param probability Probability selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActivityProbabilities(contid?: number, maxresults?: number, typeID?: string, activityID?: string, productTypeID?: string, probability?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IndActivityProbability>>;
    public getActivityProbabilities(contid?: number, maxresults?: number, typeID?: string, activityID?: string, productTypeID?: string, probability?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IndActivityProbability>>>;
    public getActivityProbabilities(contid?: number, maxresults?: number, typeID?: string, activityID?: string, productTypeID?: string, probability?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IndActivityProbability>>>;
    public getActivityProbabilities(contid?: number, maxresults?: number, typeID?: string, activityID?: string, productTypeID?: string, probability?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (typeID !== undefined) {
            queryParameters = queryParameters.set('typeID', <any>typeID);
        }
        if (activityID !== undefined) {
            queryParameters = queryParameters.set('activityID', <any>activityID);
        }
        if (productTypeID !== undefined) {
            queryParameters = queryParameters.set('productTypeID', <any>productTypeID);
        }
        if (probability !== undefined) {
            queryParameters = queryParameters.set('probability', <any>probability);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<IndActivityProbability>>(`${this.basePath}/ind/activity_probability`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get industry activity products
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param typeID Type ID selector
     * @param activityID Activity ID selector
     * @param productTypeID Product type ID selector
     * @param quantity Quantity selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActivityProducts(contid?: number, maxresults?: number, typeID?: string, activityID?: string, productTypeID?: string, quantity?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IndActivityProduct>>;
    public getActivityProducts(contid?: number, maxresults?: number, typeID?: string, activityID?: string, productTypeID?: string, quantity?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IndActivityProduct>>>;
    public getActivityProducts(contid?: number, maxresults?: number, typeID?: string, activityID?: string, productTypeID?: string, quantity?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IndActivityProduct>>>;
    public getActivityProducts(contid?: number, maxresults?: number, typeID?: string, activityID?: string, productTypeID?: string, quantity?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (typeID !== undefined) {
            queryParameters = queryParameters.set('typeID', <any>typeID);
        }
        if (activityID !== undefined) {
            queryParameters = queryParameters.set('activityID', <any>activityID);
        }
        if (productTypeID !== undefined) {
            queryParameters = queryParameters.set('productTypeID', <any>productTypeID);
        }
        if (quantity !== undefined) {
            queryParameters = queryParameters.set('quantity', <any>quantity);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<IndActivityProduct>>(`${this.basePath}/ind/activity_product`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get industry activity skills
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param typeID Type ID selector
     * @param activityID Activity ID selector
     * @param skillID Skill ID selector
     * @param level Level selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActivitySkills(contid?: number, maxresults?: number, typeID?: string, activityID?: string, skillID?: string, level?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IndActivitySkill>>;
    public getActivitySkills(contid?: number, maxresults?: number, typeID?: string, activityID?: string, skillID?: string, level?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IndActivitySkill>>>;
    public getActivitySkills(contid?: number, maxresults?: number, typeID?: string, activityID?: string, skillID?: string, level?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IndActivitySkill>>>;
    public getActivitySkills(contid?: number, maxresults?: number, typeID?: string, activityID?: string, skillID?: string, level?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (typeID !== undefined) {
            queryParameters = queryParameters.set('typeID', <any>typeID);
        }
        if (activityID !== undefined) {
            queryParameters = queryParameters.set('activityID', <any>activityID);
        }
        if (skillID !== undefined) {
            queryParameters = queryParameters.set('skillID', <any>skillID);
        }
        if (level !== undefined) {
            queryParameters = queryParameters.set('level', <any>level);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<IndActivitySkill>>(`${this.basePath}/ind/activity_skill`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get blueprints
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param typeID Type ID selector
     * @param maxProductionLimit Max production limit selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBlueprintTypes(contid?: number, maxresults?: number, typeID?: string, maxProductionLimit?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IndBlueprint>>;
    public getBlueprintTypes(contid?: number, maxresults?: number, typeID?: string, maxProductionLimit?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IndBlueprint>>>;
    public getBlueprintTypes(contid?: number, maxresults?: number, typeID?: string, maxProductionLimit?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IndBlueprint>>>;
    public getBlueprintTypes(contid?: number, maxresults?: number, typeID?: string, maxProductionLimit?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (typeID !== undefined) {
            queryParameters = queryParameters.set('typeID', <any>typeID);
        }
        if (maxProductionLimit !== undefined) {
            queryParameters = queryParameters.set('maxProductionLimit', <any>maxProductionLimit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<IndBlueprint>>(`${this.basePath}/ind/blueprint`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
