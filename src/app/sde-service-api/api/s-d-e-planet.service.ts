/**
 * EveKit SDE API Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0.20180713
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PltSchematic } from '../model/pltSchematic';
import { PltSchematicsPinMap } from '../model/pltSchematicsPinMap';
import { PltSchematicsTypeMap } from '../model/pltSchematicsTypeMap';
import { ServiceError } from '../model/serviceError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SDEPlanetService {

    protected basePath = 'https://evekit-sde.orbital.enterprises/20180713/api/ws/v20180713';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get schematic pin maps
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param schematicID Schematic ID selector
     * @param pinTypeID Pin type ID selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSchematicPinMaps(contid?: number, maxresults?: number, schematicID?: string, pinTypeID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PltSchematicsPinMap>>;
    public getSchematicPinMaps(contid?: number, maxresults?: number, schematicID?: string, pinTypeID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PltSchematicsPinMap>>>;
    public getSchematicPinMaps(contid?: number, maxresults?: number, schematicID?: string, pinTypeID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PltSchematicsPinMap>>>;
    public getSchematicPinMaps(contid?: number, maxresults?: number, schematicID?: string, pinTypeID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (schematicID !== undefined) {
            queryParameters = queryParameters.set('schematicID', <any>schematicID);
        }
        if (pinTypeID !== undefined) {
            queryParameters = queryParameters.set('pinTypeID', <any>pinTypeID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<PltSchematicsPinMap>>(`${this.basePath}/plt/schematic_pin_map`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get schematic type maps
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param schematicID Schematic ID selector
     * @param typeID Type ID selector
     * @param isInput Is input flag selector
     * @param quantity Quantity selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSchematicTypeMaps(contid?: number, maxresults?: number, schematicID?: string, typeID?: string, isInput?: string, quantity?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PltSchematicsTypeMap>>;
    public getSchematicTypeMaps(contid?: number, maxresults?: number, schematicID?: string, typeID?: string, isInput?: string, quantity?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PltSchematicsTypeMap>>>;
    public getSchematicTypeMaps(contid?: number, maxresults?: number, schematicID?: string, typeID?: string, isInput?: string, quantity?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PltSchematicsTypeMap>>>;
    public getSchematicTypeMaps(contid?: number, maxresults?: number, schematicID?: string, typeID?: string, isInput?: string, quantity?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (schematicID !== undefined) {
            queryParameters = queryParameters.set('schematicID', <any>schematicID);
        }
        if (typeID !== undefined) {
            queryParameters = queryParameters.set('typeID', <any>typeID);
        }
        if (isInput !== undefined) {
            queryParameters = queryParameters.set('isInput', <any>isInput);
        }
        if (quantity !== undefined) {
            queryParameters = queryParameters.set('quantity', <any>quantity);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<PltSchematicsTypeMap>>(`${this.basePath}/plt/schematic_type_map`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get schematics
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param schematicID Schematic ID selector
     * @param cycleTime Cycle time selector
     * @param schematicName Schematic name selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSchematics(contid?: number, maxresults?: number, schematicID?: string, cycleTime?: string, schematicName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PltSchematic>>;
    public getSchematics(contid?: number, maxresults?: number, schematicID?: string, cycleTime?: string, schematicName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PltSchematic>>>;
    public getSchematics(contid?: number, maxresults?: number, schematicID?: string, cycleTime?: string, schematicName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PltSchematic>>>;
    public getSchematics(contid?: number, maxresults?: number, schematicID?: string, cycleTime?: string, schematicName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (schematicID !== undefined) {
            queryParameters = queryParameters.set('schematicID', <any>schematicID);
        }
        if (cycleTime !== undefined) {
            queryParameters = queryParameters.set('cycleTime', <any>cycleTime);
        }
        if (schematicName !== undefined) {
            queryParameters = queryParameters.set('schematicName', <any>schematicName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<PltSchematic>>(`${this.basePath}/plt/schematic`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
