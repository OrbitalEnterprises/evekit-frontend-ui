/**
 * EveKit SDE API Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0.20180713
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ServiceError } from '../model/serviceError';
import { WarCombatZone } from '../model/warCombatZone';
import { WarCombatZoneSystem } from '../model/warCombatZoneSystem';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SDEWarService {

    protected basePath = 'https://evekit-sde.orbital.enterprises/20180713/api/ws/v20180713';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get combat zone systems
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param solarSystemID Solar system ID selector
     * @param combatZoneID Combat zone ID selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCombatZoneSystems(contid?: number, maxresults?: number, solarSystemID?: string, combatZoneID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<WarCombatZoneSystem>>;
    public getCombatZoneSystems(contid?: number, maxresults?: number, solarSystemID?: string, combatZoneID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<WarCombatZoneSystem>>>;
    public getCombatZoneSystems(contid?: number, maxresults?: number, solarSystemID?: string, combatZoneID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<WarCombatZoneSystem>>>;
    public getCombatZoneSystems(contid?: number, maxresults?: number, solarSystemID?: string, combatZoneID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (solarSystemID !== undefined) {
            queryParameters = queryParameters.set('solarSystemID', <any>solarSystemID);
        }
        if (combatZoneID !== undefined) {
            queryParameters = queryParameters.set('combatZoneID', <any>combatZoneID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<WarCombatZoneSystem>>(`${this.basePath}/war/combat_zone_system`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get combat zones
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param combatZoneID Combat zone ID selector
     * @param centerSystemID Center system ID selector
     * @param combatZoneName Combat zone name selector
     * @param description Description text selector
     * @param factionID Faction ID selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCombatZones(contid?: number, maxresults?: number, combatZoneID?: string, centerSystemID?: string, combatZoneName?: string, description?: string, factionID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<WarCombatZone>>;
    public getCombatZones(contid?: number, maxresults?: number, combatZoneID?: string, centerSystemID?: string, combatZoneName?: string, description?: string, factionID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<WarCombatZone>>>;
    public getCombatZones(contid?: number, maxresults?: number, combatZoneID?: string, centerSystemID?: string, combatZoneName?: string, description?: string, factionID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<WarCombatZone>>>;
    public getCombatZones(contid?: number, maxresults?: number, combatZoneID?: string, centerSystemID?: string, combatZoneName?: string, description?: string, factionID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (combatZoneID !== undefined) {
            queryParameters = queryParameters.set('combatZoneID', <any>combatZoneID);
        }
        if (centerSystemID !== undefined) {
            queryParameters = queryParameters.set('centerSystemID', <any>centerSystemID);
        }
        if (combatZoneName !== undefined) {
            queryParameters = queryParameters.set('combatZoneName', <any>combatZoneName);
        }
        if (description !== undefined) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (factionID !== undefined) {
            queryParameters = queryParameters.set('factionID', <any>factionID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<WarCombatZone>>(`${this.basePath}/war/combat_zone`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
