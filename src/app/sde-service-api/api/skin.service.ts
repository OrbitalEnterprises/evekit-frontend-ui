/**
 * EveKit SDE API Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0.20180713
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ServiceError } from '../model/serviceError';
import { SknLicense } from '../model/sknLicense';
import { SknMaterial } from '../model/sknMaterial';
import { SknShip } from '../model/sknShip';
import { SknSkin } from '../model/sknSkin';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SkinService {

    protected basePath = 'https://evekit-sde.orbital.enterprises/20180713/api/ws/v20180713';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get licenses
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param licenseTypeID License type ID selector
     * @param duration Duration selector
     * @param skinID Skin ID selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLicenses(contid?: number, maxresults?: number, licenseTypeID?: string, duration?: string, skinID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SknLicense>>;
    public getLicenses(contid?: number, maxresults?: number, licenseTypeID?: string, duration?: string, skinID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SknLicense>>>;
    public getLicenses(contid?: number, maxresults?: number, licenseTypeID?: string, duration?: string, skinID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SknLicense>>>;
    public getLicenses(contid?: number, maxresults?: number, licenseTypeID?: string, duration?: string, skinID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (licenseTypeID !== undefined) {
            queryParameters = queryParameters.set('licenseTypeID', <any>licenseTypeID);
        }
        if (duration !== undefined) {
            queryParameters = queryParameters.set('duration', <any>duration);
        }
        if (skinID !== undefined) {
            queryParameters = queryParameters.set('skinID', <any>skinID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<SknLicense>>(`${this.basePath}/skn/license`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get materials
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param skinMaterialID Skin material ID selector
     * @param displayNameID Display name ID selector
     * @param materialSetID Material set ID selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMaterials(contid?: number, maxresults?: number, skinMaterialID?: string, displayNameID?: string, materialSetID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SknMaterial>>;
    public getMaterials(contid?: number, maxresults?: number, skinMaterialID?: string, displayNameID?: string, materialSetID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SknMaterial>>>;
    public getMaterials(contid?: number, maxresults?: number, skinMaterialID?: string, displayNameID?: string, materialSetID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SknMaterial>>>;
    public getMaterials(contid?: number, maxresults?: number, skinMaterialID?: string, displayNameID?: string, materialSetID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (skinMaterialID !== undefined) {
            queryParameters = queryParameters.set('skinMaterialID', <any>skinMaterialID);
        }
        if (displayNameID !== undefined) {
            queryParameters = queryParameters.set('displayNameID', <any>displayNameID);
        }
        if (materialSetID !== undefined) {
            queryParameters = queryParameters.set('materialSetID', <any>materialSetID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<SknMaterial>>(`${this.basePath}/skn/material`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get ships
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param skinID Skin ID selector
     * @param typeID Type ID selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getShips(contid?: number, maxresults?: number, skinID?: string, typeID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SknShip>>;
    public getShips(contid?: number, maxresults?: number, skinID?: string, typeID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SknShip>>>;
    public getShips(contid?: number, maxresults?: number, skinID?: string, typeID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SknShip>>>;
    public getShips(contid?: number, maxresults?: number, skinID?: string, typeID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (skinID !== undefined) {
            queryParameters = queryParameters.set('skinID', <any>skinID);
        }
        if (typeID !== undefined) {
            queryParameters = queryParameters.set('typeID', <any>typeID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<SknShip>>(`${this.basePath}/skn/ship`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get skins
     * 
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param skinID Skin ID selector
     * @param internalName Internal name selector
     * @param skinMaterialID Skin material ID selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSkins(contid?: number, maxresults?: number, skinID?: string, internalName?: string, skinMaterialID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SknSkin>>;
    public getSkins(contid?: number, maxresults?: number, skinID?: string, internalName?: string, skinMaterialID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SknSkin>>>;
    public getSkins(contid?: number, maxresults?: number, skinID?: string, internalName?: string, skinMaterialID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SknSkin>>>;
    public getSkins(contid?: number, maxresults?: number, skinID?: string, internalName?: string, skinMaterialID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (skinID !== undefined) {
            queryParameters = queryParameters.set('skinID', <any>skinID);
        }
        if (internalName !== undefined) {
            queryParameters = queryParameters.set('internalName', <any>internalName);
        }
        if (skinMaterialID !== undefined) {
            queryParameters = queryParameters.set('skinMaterialID', <any>skinMaterialID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<SknSkin>>(`${this.basePath}/skn/skin`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
