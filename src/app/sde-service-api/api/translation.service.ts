/**
 * EveKit SDE API Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0.20180529
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {Observable} from 'rxjs';
import {TrnTranslation} from '../model/trnTranslation';
import {TrnTranslationColumn} from '../model/trnTranslationColumn';
import {TrnTranslationLanguage} from '../model/trnTranslationLanguage';

import {SDE_BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class TranslationService {

    protected basePath = 'http://localhost:8080/evekit-sde/api/ws/v20180529';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(SDE_BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get columns
     *
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param tcID Translation column ID selector
     * @param columnName Column name selector
     * @param masterID Master ID selector
     * @param tableName Table name selector
     * @param tcGroupID Translation column group ID selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getColumns(contid?: number, maxresults?: number, tcID?: string, columnName?: string, masterID?: string, tableName?: string, tcGroupID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TrnTranslationColumn>>;
    public getColumns(contid?: number, maxresults?: number, tcID?: string, columnName?: string, masterID?: string, tableName?: string, tcGroupID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TrnTranslationColumn>>>;
    public getColumns(contid?: number, maxresults?: number, tcID?: string, columnName?: string, masterID?: string, tableName?: string, tcGroupID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TrnTranslationColumn>>>;
    public getColumns(contid?: number, maxresults?: number, tcID?: string, columnName?: string, masterID?: string, tableName?: string, tcGroupID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (tcID !== undefined) {
            queryParameters = queryParameters.set('tcID', <any>tcID);
        }
        if (columnName !== undefined) {
            queryParameters = queryParameters.set('columnName', <any>columnName);
        }
        if (masterID !== undefined) {
            queryParameters = queryParameters.set('masterID', <any>masterID);
        }
        if (tableName !== undefined) {
            queryParameters = queryParameters.set('tableName', <any>tableName);
        }
        if (tcGroupID !== undefined) {
            queryParameters = queryParameters.set('tcGroupID', <any>tcGroupID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<TrnTranslationColumn>>(`${this.basePath}/trn/column`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get languages
     *
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param numericLanguageID Numeric language ID selector
     * @param languageID Language ID selector
     * @param languageName Language name selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLanguages(contid?: number, maxresults?: number, numericLanguageID?: string, languageID?: string, languageName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TrnTranslationLanguage>>;
    public getLanguages(contid?: number, maxresults?: number, numericLanguageID?: string, languageID?: string, languageName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TrnTranslationLanguage>>>;
    public getLanguages(contid?: number, maxresults?: number, numericLanguageID?: string, languageID?: string, languageName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TrnTranslationLanguage>>>;
    public getLanguages(contid?: number, maxresults?: number, numericLanguageID?: string, languageID?: string, languageName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (numericLanguageID !== undefined) {
            queryParameters = queryParameters.set('numericLanguageID', <any>numericLanguageID);
        }
        if (languageID !== undefined) {
            queryParameters = queryParameters.set('languageID', <any>languageID);
        }
        if (languageName !== undefined) {
            queryParameters = queryParameters.set('languageName', <any>languageName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<TrnTranslationLanguage>>(`${this.basePath}/trn/language`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get translations
     *
     * @param contid Continuation ID for paged results
     * @param maxresults Maximum number of results to retrieve
     * @param tcID Translation column ID selector
     * @param keyID Key ID selector
     * @param languageID Language ID selector
     * @param text Text selector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTranslations(contid?: number, maxresults?: number, tcID?: string, keyID?: string, languageID?: string, text?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TrnTranslation>>;
    public getTranslations(contid?: number, maxresults?: number, tcID?: string, keyID?: string, languageID?: string, text?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TrnTranslation>>>;
    public getTranslations(contid?: number, maxresults?: number, tcID?: string, keyID?: string, languageID?: string, text?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TrnTranslation>>>;
    public getTranslations(contid?: number, maxresults?: number, tcID?: string, keyID?: string, languageID?: string, text?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contid !== undefined) {
            queryParameters = queryParameters.set('contid', <any>contid);
        }
        if (maxresults !== undefined) {
            queryParameters = queryParameters.set('maxresults', <any>maxresults);
        }
        if (tcID !== undefined) {
            queryParameters = queryParameters.set('tcID', <any>tcID);
        }
        if (keyID !== undefined) {
            queryParameters = queryParameters.set('keyID', <any>keyID);
        }
        if (languageID !== undefined) {
            queryParameters = queryParameters.set('languageID', <any>languageID);
        }
        if (text !== undefined) {
            queryParameters = queryParameters.set('text', <any>text);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<TrnTranslation>>(`${this.basePath}/trn/translation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
